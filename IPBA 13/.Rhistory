install.packages(c("caret", "ggplot2"))
install.packages("shinydashboard")
shiny::runApp('__Fun_X_Excel_Channel_Videos/R/Basic R Shiny Dashbaord')
install.packages("DT")
install.packages("ggplot2")
shiny::runApp('__Fun_X_Excel_Channel_Videos/R/Basic R Shiny Dashbaord')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/Basic.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/2 Basic App with Input Widgets.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive App.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/6 Basic App Layout - tabsets.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/8 Basic App Layout - name tags.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/9 Basic App Layout - changing themes.R')
install.packages("shinythemes")
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/9 Basic App Layout - changing themes.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/9 Basic App Layout - changing themes.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/1 Basic App.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/1 Basic App.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/2 Basic App with Input Widgets.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App with reactive and render.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/1 Basic App.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/2 Basic App with Input Widgets.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/2 Basic App with Input Widgets.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/2 Basic App with Input Widgets.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
paste("sdfde","wqefdwed", " ")
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/Sample Text.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/Sample Text.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/Sample Text.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/Sample Text.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
install.packages("rlang")
install.packages("ggplot2")
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts with barplot.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/2 Basic App Text and Drop Down Inputs.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App Display Test From Input.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/2 Basic App Text and Drop Down Inputs.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App Display Test From Input.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App Display Test From Input.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4.1 Basic App Plot Charts with barplot.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4.2 Basic App Plot Charts with ggplot2.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4.2 Basic App Plot Charts with ggplot2.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App Display Test From Input.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/5 Basic App Change Bar Chart based on User Input.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/5 Basic App Change Bar Chart based on User Input.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/5 Basic App Change Bar Chart based on User Input.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/6 Basic App Import Data.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/8 Basic App Layout - name tags.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/7 Basic App with Sidebar Layout.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/7 Basic App with Sidebar Layout.R')
install.packages(c("ChoiceModelR", "mlogit"))
library(tseries)
library(forecast)
library(caret)
#Load Dataset directly
data(AirPassengers)
#Check class, it should be Time Series (ts)
class(AirPassengers)
#Check First row
start(AirPassengers)
#Check Last Row
end(AirPassengers)
#Check Frequency (daily, weekly, monthly,quarterly, yearly)
frequency(AirPassengers)
#Check summary stats
summary(AirPassengers)
#Check length
length(AirPassengers)
#Plot it on chart to inspect
plot(AirPassengers)
plot(diff(log(AirPassengers)))
#Create a Linear model based on time to see the trend
abline(reg = lm(AirPassengers~time(AirPassengers)))
#Check Cycle
cycle(AirPassengers)
#Plot Average to see it trend (moving upwards)
plot(aggregate(AirPassengers,FUN=mean))
#Check plots according to cycle
boxplot(AirPassengers~cycle(AirPassengers))
#Augmented Dickey-Fuller Test
adf.test(AirPassengers, alternative="stationary", k=0)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
#Find ACF
acf(AirPassengers)
acf(log(AirPassengers))
acf(diff(log(AirPassengers))) #p term or Lagged
pacf(diff(log(AirPassengers))) #q term or Moving average
(fit_test <- auto.arima(log(AirPassengers), seasonal = FALSE))
(fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12)))
(fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12)))
pred_train <- predict(fit, )
pred <- predict(fit, n.ahead = 10*12)
pred <- fit(fit)
ts.plot(AirPassengers,2.718^pred$pred, lty = c(1,3))
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
library(shiny); runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/3 Basic App Display Test From Input.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/4.1 Basic App Plot Charts with barplot.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/4.2 Basic App Plot Charts with ggplot2.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/5 Basic App Change Bar Chart based on User Input.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/5 Basic App Layout - Basic Slider.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/5 Basic App Change Bar Chart based on User Input.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/5 Basic App Layout - Basic Slider.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/6 Basic App Import Data.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/6 Basic App Layout - tabsets.R')
library(shiny); runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/6 Basic App Layout - tabsets.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App with reactive and render.R')
library(shiny); runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/6 Basic App Layout - tabsets.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/3 Basic App with reactive.R')
library(shiny); runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App - R Shiny Bar Plot.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App - R Shiny Bar Plot.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/5 Basic App - Group By and Plot Data.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/6 Basic App - R Shiny Bar plot using ggplot.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/5 Basic App - Group By and Plot Data.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/5 Basic App - Group By and Plot Data.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/5 Basic App - Group By and Plot Data.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/6 Basic App - R Shiny Bar plot using ggplot.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/6 Basic App - R Shiny Bar plot using ggplot.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/7 R Shiny interactive Bar Chart using Reactive and Render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/7 R Shiny interactive Bar Chart using Reactive and Render.R')
runApp('7 R Shiny interactive Bar Chart using Reactive and Render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/7 R Shiny interactive Bar Chart using Reactive and Render.R')
runApp('7 R Shiny interactive Bar Chart using Reactive and Render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/7 R Shiny interactive Bar Chart using Reactive and Render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/7 R Shiny interactive Bar Chart using Reactive and Render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamic Select Input.R')
library(shiny); runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamic Select Input.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamic Select Input.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamic Select Input.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamic Select Input.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamically update SelectInput choices.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/9 R Shiny Fluid Layout with a Sidebar.R')
library(shiny); runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamically update SelectInput choices.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/7 R Shiny interactive Bar Chart using Reactive and Render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamically update SelectInput choices.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamically update SelectInput choices.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamically update SelectInput choices.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamically update SelectInput choices.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/7 R Shiny interactive Bar Chart using Reactive and Render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/7 R Shiny interactive Bar Chart using Reactive and Render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/7 R Shiny interactive Bar Chart using Reactive and Render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/7 R Shiny interactive Bar Chart using Reactive and Render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamically update SelectInput choices.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamically update SelectInput choices.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamically update SelectInput choices.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/7 R Shiny interactive Bar Chart using Reactive and Render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamically update SelectInput choices.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamically update SelectInput choices.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamically update SelectInput choices.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/9 R Shiny Fluid Layout with a Sidebar.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/8 R Shiny Dynamically update SelectInput choices.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/9 R Shiny Fluid Layout with a Sidebar.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/9 R Shiny Fluid Layout with a Sidebar.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/9 R Shiny Fluid Layout with a Sidebar.R')
library(shiny); runApp('__DataScience_wKunaal_Channel/R Shiny Dashboards/Ryan App/attempt1.R')
runApp('__DataScience_wKunaal_Channel/R Shiny Dashboards/Ryan App/attempt2.R')
runApp('__DataScience_wKunaal_Channel/R Shiny Dashboards/Ryan App/attempt2.R')
runApp('__DataScience_wKunaal_Channel/R Shiny Dashboards/1 Basic App/8 Basic App Layout - name tags.R')
runApp('__DataScience_wKunaal_Channel/R Shiny Dashboards/Ryan App/attempt1_24Feb2021.R')
runApp('__DataScience_wKunaal_Channel/R Shiny Dashboards/Ryan App/attempt1_24Feb2021.R')
runApp('__DataScience_wKunaal_Channel/R Shiny Dashboards/Ryan App/attempt1_24Feb2021.R')
runApp('__DataScience_wKunaal_Channel/R Shiny Dashboards/Ryan App/attempt2_24Feb2021.R')
runApp('__DataScience_wKunaal_Channel/R Shiny Dashboards/Ryan App/attempt2_24Feb2021.R')
library(shiny); runApp('__DataScience_wKunaal_Channel/R Shiny Dashboards/Ryan App/attempt1_24Feb2021.R')
runApp('__DataScience_wKunaal_Channel/R Shiny Dashboards/Ryan App/attempt1_24Feb2021.R')
runApp('__DataScience_wKunaal_Channel/R Shiny Dashboards/Ryan App/attempt2_24Feb2021.R')
runApp('__DataScience_wKunaal_Channel/R Shiny Dashboards/Ryan App/attempt2_24Feb2021.R')
install.packages("datarium")
library(datarium)
data(“marketing”, package = “datarium”)
library(tidyverse)
library(ggpubr)
install.packages(c("tidyverse", "ggpubr"))
data(“marketing”, package = “datarium”)
data(“marketing”)
data('marketing')
marketing
View(marketing)
View(marketing)
write.table(marketing, file = 'D:\\OneDrive\\__DSM_LMS_Courses\\GitHub\\DSM_Data\\data_source3_knime\\marketing.csv')
write_csv(marketing, file = 'D:\\OneDrive\\__DSM_LMS_Courses\\GitHub\\DSM_Data\\data_source3_knime\\marketing.csv')
write_csv(marketing, file = 'D:\\OneDrive\\__DSM_LMS_Courses\\GitHub\\DSM_Data\\data_source3_knime\\marketing.csv')
library(readr)
write_csv(marketing, file = 'D:\\OneDrive\\__DSM_LMS_Courses\\GitHub\\DSM_Data\\data_source3_knime\\marketing.csv')
library(dplyr)
library(ggplot2)
library(summarytools)
##### Import & Clean
setwd("D:\\GitHub\\R_Basics\\IPBA 13")
#Data Import
data <- read.csv("insurance_claims.csv")
# Drop Features
drop <- c("X_c39")
data = data[,!(names(data) %in% drop)]
##### Check Summary (summarytools)
summary(data)
descr(data,
headings = FALSE, # remove headings
stats = "common" # most common descriptive statistics
)
dfSummary(data)
##### Identify Missing Values
colSums(is.na(data)) / nrow(data)
##### Import & Clean
setwd("D:\\GitHub\\R_Basics\\IPBA 13\\Data_Preprocessing_Sanity")
#Data Import
data <- read.csv("JobChange_train.csv")
##### Check Summary (summarytools)
dfSummary(data)
##### Identify Missing Values
colSums(is.na(data)) / nrow(data)
# Empty String
replace.empty <- function(a) {
a[a==""] <- NA
}
#dplyr pipe
data %>% mutate_all(funs(replace.empty))
##### Check Summary (summarytools)
dfSummary(data)
#dplyr pipe
data %>% mutate_all(list(replace.empty))
##### Check Summary (summarytools)
dfSummary(data)
# Empty String
data <- data %>%
mutate(across(where(is.character), ~ na_if(.,"")))
##### Check Summary (summarytools)
dfSummary(data)
##### Identify Missing Values
colSums(is.na(data)) / nrow(data)
library(dplyr)
library(ggplot2)
library(summarytools)
##### Import & Clean
setwd("D:\\GitHub\\R_Basics\\IPBA 13")
#Data Import
data <- read.csv("insurance_claims.csv")
# Drop Features
drop <- c("X_c39")
data = data[,!(names(data) %in% drop)]
# 2/ Add Row Number
data <- data %>% mutate(row_count = 1)
# 1/ Convert Categorical feature As Factor
data$fraud_reported <- as.factor(data$fraud_reported)
# 2/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(fraud_reported))
g
# 3/ Then add a Bar Plot
g + geom_bar()
### policy_state
# 1/ Convert Categorical feature As Factor
data$policy_state <- as.factor(data$policy_state)
# 2/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(policy_state))
# 3/ Then add a Bar Plot
g + geom_bar()
fraud_reported
# Other Type of Plots
mosaicplot(table(data$policy_state, data$fraud_reported),
color = TRUE,
xlab = "policy_state", # label for x-axis
ylab = "Fraud" # label for y-axis
)
### policy_deductable
# 1/ Convert Categorical feature As Factor
data$policy_deductable <- as.factor(data$policy_deductable)
# 2/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(policy_deductable)) + geom_bar()
### policy_deductable
# 1/ Convert Categorical feature As Factor
data$policy_deductable <- as.factor(data$policy_deductable)
# 2/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(policy_deductable)) + geom_bar()
g
# 2/ Then add a Bar Plot
g+ geom_histogram()
### age
# 1/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(age))
# 2/ Then add a Bar Plot
g+ geom_histogram()
# 2/ Then add a Bar Plot
g+ geom_histogram(bins = 5)
# 2/ Then add a Bar Plot
g+ geom_histogram(bins = 10)
### months_as_customer
# 1/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(months_as_customer))
# 2/ Then add a Bar Plot
g+ geom_histogram(bins = 10)
# 2/ Then add a Bar Plot
g+ geom_histogram(bins = 50)
# 2/ Then add a Bar Plot
g+ geom_histogram(bins = 50) +scale_fill_distiller()
# 2/ Then add a Bar Plot
g+ geom_histogram(bins = 50) +scale_fill_distiller(palette = "Blues")
# 2/ Then add a Bar Plot
g+ geom_histogram(bins = 50) +scale_fill_brewer(palette = "Blues")
### months_as_customer
# 1/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(age))
# 2/ Then add a Bar Plot
g + geom_boxplot()
g <- ggplot(data, aes(policy_annual_premium))
### property_claim
# 1/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g + geom_boxplot()
### months_as_customer
# 1/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(age, months_as_customer))
# 2/ Then add a Bar Plot
g + geom_boxplot()
### age
# 1/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(age))
# 2/ Then add a Bar Plot
g+ geom_histogram(binwidth = 4)
