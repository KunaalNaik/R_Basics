#Data Manipulation with R
setwd("D:\\GitHub\\R_Basics\\R Basics IPBA 11\\R Data Manipulation")
#setwd("C:\\Users\\DELL\\OneDrive\\Documents\\Jigsaw Courses\\Courses\\R Basics\\R Basics IPBA 11\\R Data Manipulation")
retail<-read.csv("retail_sales.csv")
product=c("Bag","shoes","belt","belt")
total_price=c(500,1000,150,10000)
color=c("Blue","red","red","blue")
quantity=c(5,2,3,4)
#Create a dataframe
product_details <- data.frame(product,total_price,color,quantity,
stringsAsFactors=FALSE)
View(product_details)
View(product_details)
?data.frame
#Understand the idea of StringsAsFactors
product_details <- data.frame(product,total_price,color,quantity)
product_details$product_new <- as.factor(product_details$product)
View(product_details)
View(product_details)
product_details
View(product_details)
class(product_details)
View(product_details)
View(product_details)
### 1/ Data Checks and Data Types
# How to take a look at the dataset?
head(retail)
tail(retail)
dim(retail)
str(retail) #helps observe sample data with type of variable which 'summary' can't
#useful for numeric data
#study the distribution of the dataset
summary(retail)
#setwd("C:\\Users\\DELL\\OneDrive\\Documents\\Jigsaw Courses\\Courses\\R Basics\\R Basics IPBA 11\\R Data Manipulation")
retail<-read.csv("retail_sales.csv")
#useful for numeric data
#study the distribution of the dataset
summary(retail)
summary(retail$Item_Category) #difference between character and numeric summaries
names(retail)
colnames(retail)
# Add a Column - Total Units
retail$Total_Units <- retail$Units_Available + retail$Units_Sold
str(retail)
# Delete - Total units
# Removes last columns
retail[-10]
retail[-"Total_Units"]
#right to delete
retail$Total_Units <- NULL
str(retail)
# Add a Column - Total Units
retail$Total_Units <- retail$Units_Available + retail$Units_Sold
retail[-"Total_Units"]
### 3/ Sort
numbers<-c(10,100,5,8)
order(numbers)
order(-numbers)
#order the entire table
retail[order(retail$Cost,decreasing=TRUE),]
sort_cost<-retail[order(retail$Cost,decreasing=TRUE),]
head(sort_cost)
View(sort_cost)
View(sort_cost)
#order the entire table
retail[order(retail$Cost,decreasing=TRUE),c(retail$Month, retail$Cost)]
#order the entire table
retail[order(retail$Cost,decreasing=TRUE),c(Month, Cost)]
#order the entire table
retail[order(retail$Cost,decreasing=TRUE),retail$Month]
#order the entire table
retail[order(retail$Cost,decreasing=TRUE),c(1,2,3)]
# Find Top Revenue Months - Order | ascending, descending | 1 col, 2 col
sorted<-retail[order(retail$Item_Category,retail$Revenue,decreasing=TRUE),]
head(sorted)
# Find Rows with Cost > 10000
retail$Cost<10000
class(retail$Cost<10000)
#retail[rows_subset_criteria,column_subset_criteria]
retail[retail$Cost<10000,]
retail[retail$Cost<10000,"Cost"]
retail[retail$Cost<10000,c("Item_Category","Cost")]
#Assign values to the sub-setted data, useful for cleaning data, treating missing values
retail_new<-retail
View(retail_new)
#Replace outliers
retail_new[retail_new$Unit_Price>69,c("Cost", "Unit_Price")] <- 74 #to each element subset 74 is assigned
summary(retail_new$Unit_Price)
retail_new$Cost
View(retail_new)
View(retail_new)
# Right Replacement
retail_new[retail_new$Unit_Price>69,"Unit_Price"] <- 74
summary(retail_new$Unit_Price)
retail_new$Cost
#Assign values to the sub-setted data, useful for cleaning data, treating missing values
retail_new<-retail
# Right Replacement
retail_new[retail_new$Unit_Price>69,"Unit_Price"] <- 74
summary(retail_new$Unit_Price)
retail_new$Cost
#Assign values to the sub-setted data, useful for cleaning data, treating missing values
retail_new<-retail
summary(retail_new$Unit_Price)
# Right Replacement
retail_new[retail_new$Unit_Price>69,"Unit_Price"] <- 74
summary(retail_new$Unit_Price)
retail_new$Cost
# Same condition using Which
which(retail$Cost <10000)
class(which(retail$Cost <10000))
retail[which(retail$Cost < 10000),]
# Select Maximum Sales using Which
which(retail$Cost == max(retail$Cost, na.rm=TRUE)) #, na.rm=TRUE
# Find Row with Maximum Sales
retail[which(retail$Cost == max(retail$Cost, na.rm=TRUE)),]
#Similarly using which to subset columns
retail_sub<- retail[,which(names(retail) %in% c("Month","Revenue"))]
head(retail_sub)
##How to check missing values?
sales<-c(100,200,NA,300,400,NA,500,600,700,NA,1000,1500,NA,NA)
is.na(sales)
#Choose values without missing values
na_removed<-sales[which(!is.na(sales))]
!is.na(sales)
which(!is.na(sales))
na_removed
# Remove Missing Values - colsums + is.na (identify Missing values at Bulk)
sum(is.na(retail$Cost)) # vector , rowm column
colSums(is.na(retail))
Item_Category
### 6/ Get Unique Values in Columns
table(retail$Item_Category) # Freq -> convert to factor
#  Find Unique from Item_Category - unique , table
unique(retail$Item_Category) # Unique values in a column
### 7/ Aggregate
agg_retail <- aggregate(retail$Revenue, by = list(retail$Item_Category), max, na.rm=TRUE )
m <- aggregate(retail$Cost,by=list(retail$Item_Category),mean)
m
class(m)
#Data Import
data <- read.csv("insurance_claims.csv")
##### Import & Clean
setwd("D:\\GitHub\\R_Basics\\R Basics IPBA 11\\R Data Sanity")
#Data Import
data <- read.csv("insurance_claims.csv")
View(data)
View(data)
# Drop Features
drop <- c("X_c39")
data = data[,!(names(data) %in% drop)]
View(data)
View(data)
##### Check Summary (summarytools)
summary(data)
descr(data,
headings = FALSE, # remove headings
stats = "common" # most common descriptive statistics
)
dfSummary(data)
library(dplyr)
library(ggplot2)
library(summarytools)
dfSummary(data)
dfSummary(data)
##### Check Summary (summarytools)
summary(data)
dfSummary(data)
dfSummary(data)
##### Check Summary (summarytools)
summary(data)
dfSummary(data)
library(dplyr)
library(dplyr)
library(ggplot2)
library(summarytools)
##### Import & Clean
setwd("D:\\GitHub\\R_Basics\\R Basics IPBA 11\\R Data Sanity")
#Data Import
data <- read.csv("insurance_claims.csv")
# Drop Features
drop <- c("X_c39")
data = data[,!(names(data) %in% drop)]=
##### Check Summary (summarytools)
summary(data)
data = data[,!(names(data) %in% drop)]=
##### Check Summary (summarytools)
summary(data)
data = data[,!(names(data) %in% drop)]=
##### Check Summary (summarytools)
summary(data)
# Drop Features
drop <- c("X_c39")
data = data[,!(names(data) %in% drop)]
##### Check Summary (summarytools)
summary(data)
dfSummary(data)
# 2/ Add Row Number
data$row_count <- 1
# 1/ Add Fraud Flag
# =IF(AM2="y",1,0)
data <- data %>% mutate(fraud_flag = if_else(fraud_reported == "Y", 1, 0))
# 1/ Convert Categorical feature As Factor
data <- data %>% mutate(fraud_reported = as.factor(fraud_reported))
#Data Import
data <- read.csv("insurance_claims.csv")
# allows multiple operations at one time
data <- data %>% mutate(fraud_flag = if_else(fraud_reported == "Y", 1, 0)) %>% mutate(fraud_reported = as.factor(fraud_reported))
# 2/ Add Row Number
data$row_count <- 1
# Drop Features
drop <- c("X_c39")
data = data[,!(names(data) %in% drop)]
# 2/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(fraud_reported))
g <- g + geom_bar()
g
### policy_state
# 1/ Convert Categorical feature As Factor
data <- data %>% mutate(policy_state = as.factor(policy_state))
# 2/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(policy_state))
# 3/ Then add a Bar Plot
g <- g + geom_bar()
g
# Other Type of Plots
mosaicplot(table(data$policy_state, data$fraud_reported),
color = TRUE,
xlab = "policy_state", # label for x-axis
ylab = "Fraud" # label for y-axis
)
# Other Type of Plots
table(data$policy_state, data$fraud_reported)
### policy_deductable
# 1/ Convert Categorical feature As Factor
data <- data %>% mutate(policy_deductable = as.factor(policy_deductable))
# 2/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
# Make
g <- ggplot(data, aes(policy_state)) + geom_bar()
# Display
g
g <- ggplot(data, aes(policy_deductable)) + geom_bar()
# Display
g
### age
# 1/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(age)) + geom_histogram()
g
### age
# 1/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(age)) + geom_histogram(bins = 10)
g
### age
# 1/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(age)) + geom_histogram(bins = 15)
g
# 2/ If not Normal - Convert to Normal
data <- data %>% mutate(age = log10(age))
#Re plot
g <- ggplot(data, aes(age)) + geom_histogram(bins = 15)
g
#Re plot
g <- ggplot(data, aes(age)) + geom_histogram(bins = 15)
g
### policy_annual_premium
# 1/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(policy_annual_premium)) + geom_histogram(bins = 15)
g
### policy_annual_premium
# 1/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(policy_annual_premium)) + geom_box_plot()
g
### policy_annual_premium
# 1/ Set the Chart Canvas with Required Features - For Categorical just use one Feature in aes()
g <- ggplot(data, aes(policy_annual_premium)) + geom_boxplot()
g
